"use client"

import localFont from "next/font/local";
import "./globals.css";
import { useEffect, useState } from "react";
import AppContext from "./contexts/appContext";
import Link from "next/link";
import { loadStripe } from "@stripe/stripe-js";
import { Elements } from "@stripe/react-stripe-js";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  const [cart, setCart] = useState({})
  const [management, setManagement] = useState(null)
  const [userData, setUserData] = useState(null)
  const [signInData, setSignInData] = useState({
    email: "",
    password: ""
  })

  function onChangeSignIn(e) {
    setSignInData({ ...signInData, [e.target.name]: e.target.value });
  }

  async function handleSignIn(e) {
    e.preventDefault()
    const response = await fetch("/api/users/login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(signInData)
    })
    if (!response.ok) {
      const body = await response.json()
      alert(body.message)
      return
    }
    getUserData()
  }

  async function getUserData() {
    const response = await fetch(`/api/users/me`)
    if (response.ok) {
      const body = await response.json()
      console.log(body)
      setUserData(body)
    }
  }
  useEffect(() => {

    getUserData()

  }, [])
  function addItem(item) {
    setCart((prevCart) => {
      return {
        ...prevCart,
        [item._id]: {
          item: item,
          quantity: (prevCart[item._id]?.quantity || 0) + 1
        }
      }
    })
  }
  function removeItem(item) {
    setCart((prevCart) => {
      if (prevCart[item._id].quantity === 1) {
        return JSON.parse(JSON.stringify({
          ...prevCart,
          [item._id]: undefined
        }))
      }
      return {
        ...prevCart,
        [item._id]: {
          item: item,
          quantity: prevCart[item._id].quantity - 1
        }
      }
    })
  }
  async function handleLogOut() {
    await fetch("/api/users/logout")
    setUserData(null)
  }

  async function loginWithGoogle() {
    const response = await fetch("/api/users/oauth2/start")
    const { authorizationUrl } = await response.json()
    window.location.href = authorizationUrl
  }

  const cartTotal = Object.values(cart).reduce((acc, { item, quantity }) => {
    return acc + item.price * quantity
  }, 0)
  const stripePromise = loadStripe(
    "pk_test_51Q2POHGKYIRo5d8xgrCX8E4gMD1p36nwBlZgz1AruyuhHjdNYNrZ1YwC3zxdoP02Xg295CUOHeWGp5s6FqcfY8i900zEKXXOqi"
  );
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} page-layout`}>
        <div className="menu-bar">
          <h1 className="sticker title">RestauranTour!</h1>
          {userData ? <div className="account-management">
              <div className="sticker user-name">{userData.name}</div>
            <button onClick={handleLogOut}>Log Out</button>
          </div> : !management ? <div className="account-management">
            <Link href="/register">Create Account</Link>
            <button onClick={() => { setManagement("Sign In") }}>Sign In</button>
            <button onClick={loginWithGoogle}>Google Sign-In</button>
          </div> : <form className="account-management" onSubmit={handleSignIn}>
            <input name="email" type="email" onChange={onChangeSignIn} />
            <input name="password" type="password" onChange={onChangeSignIn} />
            <button>{management}</button>
            <button type="button" onClick={() => { setManagement(null) }}>X</button>
          </form>}
        </div>
        <AppContext.Provider value={{ addItem: addItem, cart: cart, removeItem: removeItem, cartTotal: cartTotal }}>
          <Elements stripe={stripePromise}>
            {children}
          </Elements>
        </AppContext.Provider>
      </body>
    </html>
  );
}
